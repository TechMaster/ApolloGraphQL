{"version":3,"sources":["../schema.js"],"names":["typeDefs","authors","id","firstName","lastName","posts","authorId","title","votes","lodash","require","resolvers","Query","author","_","find","postById","postsByText","arr","map","item","indexOf","push","Mutation","upvotePost","postId","post","Error","Author","filter","Post","module","exports"],"mappings":";;AAAA,IAAMA,8jBAAN;;AA8BA;AACA,IAAMC,UAAU,CACZ,EAACC,IAAI,CAAL,EAAQC,WAAW,KAAnB,EAA0BC,UAAU,SAApC,EADY,EAEZ,EAACF,IAAI,CAAL,EAAQC,WAAW,QAAnB,EAA6BC,UAAU,UAAvC,EAFY,EAGZ,EAACF,IAAI,CAAL,EAAQC,WAAW,SAAnB,EAA8BC,UAAU,SAAxC,EAHY,CAAhB;AAKA,IAAMC,SAAQ,CACV,EAACH,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,yBAA5B,EAAuDC,OAAO,CAA9D,EADU,EAEV,EAACN,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,mBAA5B,EAAiDC,OAAO,CAAxD,EAFU,EAGV,EAACN,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,kBAA5B,EAAgDC,OAAO,CAAvD,EAHU,EAIV,EAACN,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,mBAA5B,EAAiDC,OAAO,CAAxD,EAJU,CAAd;AAMA,IAAMC,SAASC,QAAQ,QAAR,CAAf;;AAEA,IAAMC,YAAY;AACVC,WAAO;AACHP,eAAO;AAAA,mBAAMA,MAAN;AAAA,SADJ;AAEHQ,gBAAQ,gBAACC,CAAD,QAAa;AAAA,gBAARZ,EAAQ,QAARA,EAAQ;;AACjB,mBAAOO,OAAOM,IAAP,CAAYd,OAAZ,EAAqB,EAACC,IAAIA,EAAL,EAArB,CAAP;AACH,SAJE;AAKHc,kBAAU,kBAACF,CAAD;AAAA,gBAAKZ,EAAL,SAAKA,EAAL;AAAA,mBAAaO,OAAOM,IAAP,CAAYV,MAAZ,EAAmB,EAACH,IAAIA,EAAL,EAAnB,CAAb;AAAA,SALP;AAMHe,qBAAa,qBAACH,CAAD,SAAgB;AAAA,gBAAXP,KAAW,SAAXA,KAAW;;AACzB,gBAAIW,MAAM,EAAV;AACAb,mBAAMc,GAAN,CAAU,gBAAQ;AACd,oBAAGC,KAAKb,KAAL,CAAWc,OAAX,CAAmBd,KAAnB,KAA6B,CAAhC,EAAmC;AAC/BW,wBAAII,IAAJ,CAASF,IAAT;AACH;AACJ,aAJD;AAKA,mBAAOF,GAAP;AACH;AAdE,KADG;;AAkBVK,cAAU;AACNC,oBAAY,oBAACV,CAAD,SAAiB;AAAA,gBAAZW,MAAY,SAAZA,MAAY;;AACzB,gBAAMC,OAAOjB,OAAOM,IAAP,CAAYV,MAAZ,EAAmB,EAACH,IAAIuB,MAAL,EAAnB,CAAb;AACA,gBAAI,CAACC,IAAL,EAAW;AACP,sBAAM,IAAIC,KAAJ,kCAAwCF,MAAxC,CAAN;AACH;AACDC,iBAAKlB,KAAL,IAAc,CAAd;AACA,mBAAOkB,IAAP;AACH;AARK,KAlBA;AA4BVE,YAAQ;AACJvB,eAAO,eAACQ,MAAD;AAAA,mBAAYJ,OAAOoB,MAAP,CAAcxB,MAAd,EAAqB,EAACC,UAAUO,OAAOX,EAAlB,EAArB,CAAZ;AAAA;AADH,KA5BE;;AAgCV4B,UAAM;AACFjB,gBAAQ,gBAACa,IAAD;AAAA,mBAAUjB,OAAOM,IAAP,CAAYd,OAAZ,EAAqB,EAACC,IAAIwB,KAAKpB,QAAV,EAArB,CAAV;AAAA;AADN;;AAhCI,CAAlB;;AAuCAyB,OAAOC,OAAP,GAAiB;AACbhC,cAAUA,QADG;AAEbW,eAAWA;AAFE,CAAjB","file":"schema.js","sourcesContent":["const typeDefs = `\n  type Author {\n    id: Int!\n    firstName: String\n    lastName: String\n    posts: [Post] # the list of Posts by this author\n  }\n  type Post {\n    id: Int!\n    title: String\n    author: Author\n    votes: Int\n  }\n  # the schema allows the following query:\n  type Query {\n    posts: [Post]\n    post(id: Int!): Post\n    author(id: Int!): Author,\n    postById(id: Int!): Post\n    postsByText(title: String!): [Post]\n  }\n  # this schema allows the following mutation:\n  type Mutation {\n    upvotePost (\n      postId: Int!\n    ): Post\n  }\n`;\n\n\n// example data\nconst authors = [\n    {id: 1, firstName: 'Tom', lastName: 'Coleman'},\n    {id: 2, firstName: 'Sashko', lastName: 'Stubailo'},\n    {id: 3, firstName: 'Mikhail', lastName: 'Novikov'},\n];\nconst posts = [\n    {id: 1, authorId: 1, title: 'Introduction to GraphQL', votes: 2},\n    {id: 2, authorId: 2, title: 'Welcome to Meteor', votes: 3},\n    {id: 3, authorId: 2, title: 'Advanced GraphQL', votes: 1},\n    {id: 4, authorId: 3, title: 'Launchpad is Cool', votes: 7},\n];\nconst lodash = require('lodash');\n\nconst resolvers = {\n        Query: {\n            posts: () => posts,\n            author: (_, {id}) => {\n                return lodash.find(authors, {id: id});\n            },\n            postById: (_, {id}) => lodash.find(posts, {id: id}),\n            postsByText: (_, {title}) => {\n                let arr = [];\n                posts.map(item => {\n                    if(item.title.indexOf(title) >= 0) {\n                        arr.push(item)\n                    }\n                })\n                return arr;\n            }\n        },\n\n        Mutation: {\n            upvotePost: (_, {postId}) => {\n                const post = lodash.find(posts, {id: postId});\n                if (!post) {\n                    throw new Error(`Couldn't find post with id ${postId}`);\n                }\n                post.votes += 1;\n                return post;\n            },\n        },\n        Author: {\n            posts: (author) => lodash.filter(posts, {authorId: author.id}),\n        }\n        ,\n        Post: {\n            author: (post) => lodash.find(authors, {id: post.authorId}),\n        }\n        ,\n    }\n;\n\nmodule.exports = {\n    typeDefs: typeDefs,\n    resolvers: resolvers\n};"]}