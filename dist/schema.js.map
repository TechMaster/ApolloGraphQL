{"version":3,"sources":["../schema.js"],"names":["typeDefs","authors","id","firstName","lastName","posts","authorId","title","votes","lodash","require","resolvers","Query","author","abc","console","log","find","Mutation","upvotePost","_","postId","post","Error","Author","filter","Post","module","exports"],"mappings":";;AAAA,IAAMA,4dAAN;;AA2BA;AACA,IAAMC,UAAU,CACZ,EAACC,IAAI,CAAL,EAAQC,WAAW,KAAnB,EAA0BC,UAAU,SAApC,EADY,EAEZ,EAACF,IAAI,CAAL,EAAQC,WAAW,QAAnB,EAA6BC,UAAU,UAAvC,EAFY,EAGZ,EAACF,IAAI,CAAL,EAAQC,WAAW,SAAnB,EAA8BC,UAAU,SAAxC,EAHY,CAAhB;AAKA,IAAMC,SAAQ,CACV,EAACH,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,yBAA5B,EAAuDC,OAAO,CAA9D,EADU,EAEV,EAACN,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,mBAA5B,EAAiDC,OAAO,CAAxD,EAFU,EAGV,EAACN,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,kBAA5B,EAAgDC,OAAO,CAAvD,EAHU,EAIV,EAACN,IAAI,CAAL,EAAQI,UAAU,CAAlB,EAAqBC,OAAO,mBAA5B,EAAiDC,OAAO,CAAxD,EAJU,CAAd;AAMA,IAAMC,SAASC,QAAQ,QAAR,CAAf;;AAEA,IAAMC,YAAY;AACVC,WAAO;AACHP,eAAO;AAAA,mBAAMA,MAAN;AAAA,SADJ;AAEHQ,gBAAQ,gBAACC,GAAD,QAAe;AAAA,gBAARZ,EAAQ,QAARA,EAAQ;;AACnBa,oBAAQC,GAAR,CAAYF,GAAZ;AACA,mBAAOL,OAAOQ,IAAP,CAAYhB,OAAZ,EAAqB,EAACC,IAAIA,EAAL,EAArB,CAAP;AACH;AALE,KADG;;AASVgB,cAAU;AACNC,oBAAY,oBAACC,CAAD,SAAiB;AAAA,gBAAZC,MAAY,SAAZA,MAAY;;AACzB,gBAAMC,OAAOb,OAAOQ,IAAP,CAAYZ,MAAZ,EAAmB,EAACH,IAAImB,MAAL,EAAnB,CAAb;AACA,gBAAI,CAACC,IAAL,EAAW;AACP,sBAAM,IAAIC,KAAJ,kCAAwCF,MAAxC,CAAN;AACH;AACDC,iBAAKd,KAAL,IAAc,CAAd;AACA,mBAAOc,IAAP;AACH;AARK,KATA;AAmBVE,YAAQ;AACJnB,eAAO,eAACQ,MAAD;AAAA,mBAAYJ,OAAOgB,MAAP,CAAcpB,MAAd,EAAqB,EAACC,UAAUO,OAAOX,EAAlB,EAArB,CAAZ;AAAA;AADH,KAnBE;;AAuBVwB,UAAM;AACFb,gBAAQ,gBAACS,IAAD;AAAA,mBAAUb,OAAOQ,IAAP,CAAYhB,OAAZ,EAAqB,EAACC,IAAIoB,KAAKhB,QAAV,EAArB,CAAV;AAAA;AADN;;AAvBI,CAAlB;;AA8BAqB,OAAOC,OAAP,GAAiB;AACb5B,cAAUA,QADG;AAEbW,eAAWA;AAFE,CAAjB","file":"schema.js","sourcesContent":["const typeDefs = `\n  type Author {\n    id: Int!\n    firstName: String\n    lastName: String\n    posts: [Post] # the list of Posts by this author\n  }\n  type Post {\n    id: Int!\n    title: String\n    author: Author\n    votes: Int\n  }\n  # the schema allows the following query:\n  type Query {\n    posts: [Post]\n    author(id: Int!): Author\n  }\n  # this schema allows the following mutation:\n  type Mutation {\n    upvotePost (\n      postId: Int!\n    ): Post\n  }\n`;\n\n\n// example data\nconst authors = [\n    {id: 1, firstName: 'Tom', lastName: 'Coleman'},\n    {id: 2, firstName: 'Sashko', lastName: 'Stubailo'},\n    {id: 3, firstName: 'Mikhail', lastName: 'Novikov'},\n];\nconst posts = [\n    {id: 1, authorId: 1, title: 'Introduction to GraphQL', votes: 2},\n    {id: 2, authorId: 2, title: 'Welcome to Meteor', votes: 3},\n    {id: 3, authorId: 2, title: 'Advanced GraphQL', votes: 1},\n    {id: 4, authorId: 3, title: 'Launchpad is Cool', votes: 7},\n];\nconst lodash = require('lodash');\n\nconst resolvers = {\n        Query: {\n            posts: () => posts,\n            author: (abc, {id}) => {\n                console.log(abc);\n                return lodash.find(authors, {id: id});\n            }\n        },\n\n        Mutation: {\n            upvotePost: (_, {postId}) => {\n                const post = lodash.find(posts, {id: postId});\n                if (!post) {\n                    throw new Error(`Couldn't find post with id ${postId}`);\n                }\n                post.votes += 1;\n                return post;\n            },\n        },\n        Author: {\n            posts: (author) => lodash.filter(posts, {authorId: author.id}),\n        }\n        ,\n        Post: {\n            author: (post) => lodash.find(authors, {id: post.authorId}),\n        }\n        ,\n    }\n;\n\nmodule.exports = {\n    typeDefs: typeDefs,\n    resolvers: resolvers\n};"]}